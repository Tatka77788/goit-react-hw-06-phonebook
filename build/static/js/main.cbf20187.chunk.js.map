{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/App/App.module.css","transitions/slide.module.css","components/Alert/Alert.module.css","transitions/title.module.css","transitions/pop.module.css","transitions/alert.module.css","redux/contacts/contactsActions.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormContainer.js","redux/filter/filterActions.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","helpers/phoneformatter.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/Alert/Alert.js","components/App/App.js","components/App/AppContainer.js","redux/contacts/contactsReducer.js","redux/filter/filterReducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","deleteContact","getContactsFromLS","getContacts","state","contacts","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","INITIAL_STATE","number","ContactForm","handleChangeName","value","target","setState","handleChangeNumber","phoneNumber","replace","handleSubmit","e","props","preventDefault","length","find","onSetMessage","onAddContact","id","uuidv4","this","className","styles","form","onSubmit","input","type","placeholder","required","onChange","mask","button","Component","connect","dispatch","filterContacts","Filter","container","label","formatPhone","array","ContactList","onDeleteContact","TransitionGroup","component","list","map","CSSTransition","key","timeout","unmountOnExit","classNames","slideTransition","listItem","paragraph","split","onClick","Alert","message","Notification","isVisible","App","setMessage","setTimeout","onGetContactsFromLS","savedContacts","localStorage","getItem","JSON","parse","prevState","setItem","stringify","in","titleTransition","appear","title","alertTransition","popTransition","contactsReducer","createReducer","payload","filterReducer","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cbf20187.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__22Awc\",\"listItem\":\"ContactList_listItem__3EWIb\",\"paragraph\":\"ContactList_paragraph__1iMCh\",\"button\":\"ContactList_button__236U_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"telInput\":\"ContactForm_telInput__24TRG\",\"form\":\"ContactForm_form__dg_RZ\",\"label\":\"ContactForm_label__YfT_q\",\"input\":\"ContactForm_input__1gh5W\",\"button\":\"ContactForm_button__e5arN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__2kx40\",\"label\":\"Filter_label__1Y1kp\",\"input\":\"Filter_input__2pHIu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3clrC\",\"title\":\"App_title__2SXaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1Mos4\",\"enterActive\":\"slide_enterActive__3r5ks\",\"exit\":\"slide_exit__2H-4q\",\"exitActive\":\"slide_exitActive__5fC6T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Notification\":\"Alert_Notification__2bYth\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"title_appear__2gYJh\",\"appearDone\":\"title_appearDone__2YzRr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__133oU\",\"enterActive\":\"pop_enterActive__2WOhX\",\"exit\":\"pop_exit__23wmr\",\"exitActive\":\"pop_exitActive__1THJ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"alert_enter__rNcHe\",\"enterActive\":\"alert_enterActive__3P2dU\",\"exit\":\"alert_exit__2Lpek\",\"exitActive\":\"alert_exitActive__2tlps\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('ADD_CONTACT');\n\nconst deleteContact = createAction('DELETE_CONTACT');\n\nconst getContactsFromLS = createAction('GET_CONTACTS');\n\nexport { addContact, deleteContact, getContactsFromLS };\n","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.contacts;\nexport const getFilter = state => state.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport InputMask from 'react-input-mask';\nimport styles from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nexport default class ContactForm extends Component {\n  static propTypes = {\n    onAddContact: PropTypes.func.isRequired,\n    onSetMessage: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n      }),\n    ).isRequired,\n  };\n\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  handleChangeName = ({ target: { value } }) => {\n    this.setState({\n      name: value,\n    });\n  };\n\n  handleChangeNumber = ({ target: { value } }) => {\n    const phoneNumber = value.replace(/\\D+/g, '');\n    this.setState({\n      number: phoneNumber,\n    });\n  };\n\n  handleSubmit = e => {\n    const { number, name } = this.state;\n    const { contacts } = this.props;\n\n    e.preventDefault();\n\n    if (number.length === 12) {\n      if (contacts.find(contact => contact.name === name)) {\n        this.props.onSetMessage('Contact already exists!');\n        this.setState({\n          ...INITIAL_STATE,\n        });\n      } else {\n        this.props.onAddContact(\n          { ...this.state, id: uuidv4() },\n\n          this.setState({\n            ...INITIAL_STATE,\n          }),\n        );\n      }\n    } else {\n      this.props.onSetMessage('Incomplete number entered!');\n    }\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <input\n          className={styles.input}\n          type=\"text\"\n          placeholder=\"Enter name...\"\n          required\n          value={name}\n          onChange={this.handleChangeName}\n        />\n\n        <InputMask\n          className={styles.input}\n          mask=\"+99(999)999-99-99\"\n          placeholder=\"Enter number 99(999)999-99-99\"\n          required\n          value={number}\n          onChange={this.handleChangeNumber}\n        />\n\n        <button className={styles.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contactsActions';\nimport ContactForm from './ContactForm';\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(addContact(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","/* eslint-disable import/prefer-default-export */\nimport { createAction } from '@reduxjs/toolkit';\n\nconst filterContacts = createAction('FILTER_CONTACTS');\n\nexport { filterContacts };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ onChange }) => (\n  <div className={styles.container}>\n    <label className={styles.label}>\n      Find contact by name\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        onChange={e => onChange(e.target.value)}\n      />\n    </label>\n  </div>\n);\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import { connect } from 'react-redux';\nimport { filterContacts } from '../../redux/filter/filterActions';\nimport Filter from './Filter';\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: filter => dispatch(filterContacts(filter)),\n});\n\nexport default connect(null, mapDispatchToProps)(Filter);\n","const formatPhone = array => {\n  return `+${array[0]}${array[1]}(${array[2]}${array[3]}${array[4]})${array[5]}${array[6]}${array[7]}-${array[8]}${array[9]}-${array[10]}${array[11]}`;\n};\n\nexport default formatPhone;\n","/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport slideTransition from '../../transitions/slide.module.css';\nimport formatPhone from '../../helpers/phoneformatter';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <TransitionGroup component=\"ul\" className={styles.list}>\n      {contacts.map(({ name, number, id }) => (\n        <CSSTransition\n          key={id}\n          timeout={250}\n          unmountOnExit\n          classNames={slideTransition}\n        >\n          <li className={styles.listItem} key={id} id={id}>\n            <span className={styles.paragraph}>{name}</span>\n            <span className={styles.paragraph}>\n              {formatPhone(number.split(''))}\n            </span>\n\n            <button\n              className={styles.button}\n              onClick={() => onDeleteContact(id)}\n            >\n              &#215;\n            </button>\n          </li>\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contactsActions';\nimport ContactList from './ContactList';\nimport { getFilteredContacts } from '../../redux/selectors';\n\nconst mapStateToProps = state => ({\n  contacts: getFilteredContacts(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Alert.module.css';\n\nconst Alert = ({ message }) => (\n  <div className={styles.Notification}>{message}</div>\n);\n\nAlert.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Alert;\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport ContactForm from '../ContactForm/ContactFormContainer';\nimport Filter from '../Filter/FilterContainer';\nimport ContactList from '../ContactList/ContactListContainer';\nimport Alert from '../Alert/Alert';\nimport styles from './App.module.css';\nimport titleTransition from '../../transitions/title.module.css';\nimport popTransition from '../../transitions/pop.module.css';\nimport alertTransition from '../../transitions/alert.module.css';\n\nconst INITIAL_STATE = {\n  isVisible: false,\n  message: '',\n};\n\nexport default class App extends Component {\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  componentDidMount() {\n    const { onGetContactsFromLS } = this.props;\n    const savedContacts = localStorage.getItem('contacts');\n    if (savedContacts) {\n      onGetContactsFromLS(JSON.parse(savedContacts));\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const { contacts } = this.props;\n    if (prevState.contacts !== contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  setMessage = message => {\n    this.setState({ isVisible: true, message });\n    setTimeout(() => {\n      this.setState({\n        ...INITIAL_STATE,\n      });\n    }, 1500);\n  };\n\n  render() {\n    const { contacts } = this.props;\n    const { isVisible, message } = this.state;\n    return (\n      <div className={styles.container}>\n        <CSSTransition in timeout={500} classNames={titleTransition} appear>\n          <h2 className={styles.title}>Phonebook</h2>\n        </CSSTransition>\n        <ContactForm onSetMessage={this.setMessage} contacts={contacts} />\n        <CSSTransition\n          in={isVisible}\n          timeout={250}\n          unmountOnExit\n          classNames={alertTransition}\n        >\n          <Alert message={message} />\n        </CSSTransition>\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          timeout={250}\n          unmountOnExit\n          classNames={popTransition}\n        >\n          <Filter />\n        </CSSTransition>\n        <ContactList />\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { getContactsFromLS } from '../../redux/contacts/contactsActions';\nimport { getContacts, getFilter } from '../../redux/selectors';\nimport App from './App';\n\nconst mapStateToProps = state => ({\n  contacts: getContacts(state),\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onGetContactsFromLS: contacts => dispatch(getContactsFromLS(contacts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContact,\n  deleteContact,\n  getContactsFromLS,\n} from './contactsActions';\n\nconst contacts = [];\n\nconst contactsReducer = createReducer(contacts, {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n  [getContactsFromLS]: (state, { payload }) => payload,\n});\n\nexport default contactsReducer;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { filterContacts } from './filterActions';\n\nconst filter = '';\n\nconst filterReducer = createReducer(filter, {\n  [filterContacts]: (state, { payload }) => payload,\n});\n\nexport default filterReducer;\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contactsReducer';\nimport filterReducer from './filter/filterReducer';\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App/AppContainer';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}